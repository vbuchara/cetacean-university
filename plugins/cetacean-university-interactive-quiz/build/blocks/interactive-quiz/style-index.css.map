{"version":3,"file":"blocks/interactive-quiz/style-index.css","mappings":";;;AAAA;EACI;IACI;ECCN;EDEE;IACI;ECAN;AACF;ADGA;EACI;IACI;ECDN;EDIE;IACI;ECFN;EDKE;IACI;ECHN;EDME;IACI;ECJN;EDOE;IACI;ECLN;AACF;ADQA;EACI;IACI;ECNN;EDSE;IACI;ECPN;EDUE;IACI;ECRN;EDWE;IACI;ECTN;AACF;AAhCA;EAGI;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA,cCjBI;EDkBJ;EAEA;EACA;EACA;EAEA;EACA;EACA;AA4BJ;AE9CI;EFHJ;IAwBQ;EA6BN;AACF;AA3BI;EACI;EACA;AA6BR;AA1BI;EACI;EAEA;EACA;EACA;EACA;AA2BR;AAxBI;EAGI;EACA;EACA;EACA;EACA;EACA;gFAAA;EAGA;EACA,mEACI;EACJ;EAEA;EAEA;EACA;EAEA,cCpEA;EDqEA;EAEA;EACA;EACA;EAEA;AAiBR;AAfQ;EACI;EAEA;EACA;EACA;EAEA;EAEA,yBCtFJ;ADoGR;AAZY;EACI;EACA;EAEA;AAahB;AATQ;EACI;EACA;EACA;AAWZ;AARQ;EACI;EACA;AAUZ;AARY;EAEI,iEACI;AAQpB;AAFY;EACI,6EACI;AAGpB;AAGY;EACI;IACI;EADlB;EAIc;IACI;EAFlB;AACF;AAMQ;EAEI;EACA;EACA;EAEA;AANZ;AASQ;EAEI;EACA;EACA;EAEA;AATZ;AAYQ;EACI;EACA;AAVZ;AAaQ;EACI;EACA;AAXZ;AAcQ;EACI;AAZZ;AAeQ;EACI;EACA;AAbZ;AAiBI;EACI;EACA;EAEA;EACA;EACA;EAEA,yBC3KM;ED6KN,qBC7KM;ED8KN;EACA;EAEA,cC1LA;ED4LA;EACA;AApBR;AAsBQ;EACI,yBChMJ;EDiMI,cCxLE;ADoKd;AAuBQ;EACI;EACA,yBCpML;EDqMK,qBCrML;ADgLP;AAyBI;EACI;EACA;EAEA;EAEA;AAzBR;AA2BQ;EACI,cC9MJ;ADqLR;AA4BQ;EACI,cCpNN;AD0LN,C","sources":["webpack://cetacean-university-interactive-quiz/./src/styles/base/_animations.scss","webpack://cetacean-university-interactive-quiz/./src/blocks/interactive-quiz/style.scss","webpack://cetacean-university-interactive-quiz/./src/styles/abstract/_variables.scss","webpack://cetacean-university-interactive-quiz/./src/styles/abstract/_breakpoints.scss"],"sourcesContent":["@keyframes slide-in {\r\n    from {\r\n        transform: translateX(-100%);\r\n    }\r\n\r\n    to {\r\n        transform: translateX(0%);\r\n    }\r\n}\r\n\r\n@keyframes pulse-outline{\r\n    0% {\r\n        outline-offset: 0;\r\n    }\r\n\r\n    25% {\r\n        outline-offset: 4px;\r\n    }\r\n\r\n    50% {\r\n        outline-offset: 0;\r\n    }\r\n\r\n    75% {\r\n        outline-offset: 4px;\r\n    }\r\n\r\n    100% {\r\n        outline-offset: 0;\r\n    }\r\n}\r\n\r\n@keyframes loading-dots {\r\n    0% {\r\n        content: \"\";\r\n    }\r\n\r\n    25% {\r\n        content: \".\";\r\n    }\r\n\r\n    50% {\r\n        content: \"..\";\r\n    }\r\n\r\n    100% {\r\n        content: \"...\";\r\n    }\r\n}","@use 'sass:color';\n@use '@styles/abstract/variables' as *;\n@use '@styles/abstract/breakpoints' as *;\n\n@use '@styles/base/animations';\n\n.interactive-quiz-save-block {\n    $save-selector: &;\n\n    --grid-columns: 1;\n    --background-color: #{$dolphin};\n    --border-color: #{color.scale($dolphin, $lightness: -25%)};\n    --text-align: center;\n\n    padding-inline: 10px;\n    padding-block: 20px;\n    margin-block: 15px;\n\n    color: $black;\n    background-color: var(--background-color);\n    \n    border-width: 2px;\n    border-style: solid;\n    border-color: var(--border-color);\n\n    display: grid;\n    grid-template-columns: repeat(var(--grid-columns), 1fr);\n    gap: 0.8rem;\n\n    @include atMedium {\n        --grid-columns: 2;\n    };\n\n    pre {\n        display: none;\n        visibility: hidden;\n    }\n\n    &__question, &__question:is(h2, #priority) {\n        grid-column: span var(--grid-columns);\n\n        font-size: 2rem;\n        font-weight: 500;\n        line-height: 1.4;\n        text-align: var(--text-align);\n    }\n\n    &__answer {\n        $answer-selector: &;\n        \n        --answer-color: #{$whales-tale};\n        --answer-border-color: #{color.scale($whales-tale, $blackness: 25%)};\n        --quiz-answer-text-column: span 2;\n        --quiz-answer-icon-size: 1.6em;\n        --quiz-answer-icon-padding: 0.8em;\n        --quiz-answer-icon-grid-column-size: \n            calc((var(--quiz-answer-icon-padding) * 2) + var(--quiz-answer-icon-size));\n\n        display: grid;\n        grid-template-columns: \n            var(--quiz-answer-icon-grid-column-size) 1fr;\n        position: relative;\n\n        background-color: var(--answer-color);\n\n        border-color: var(--answer-border-color);\n        border-radius: 5px;\n\n        color: $white;\n        text-align: center;\n\n        cursor: pointer;\n        overflow: hidden;\n        transition: background-color 0.25s ease-in;\n\n        outline-color: var(--answer-color);\n\n        &-icon {\n            --color: var(--answer-color);\n\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            \n            padding-inline: var(--quiz-answer-icon-padding);\n\n            background-color: $white;\n\n            svg {\n                width: var(--quiz-answer-icon-size);\n                height: var(--quiz-answer-icon-size);\n\n                color: var(--color);\n            }\n        }\n\n        &-text {\n            grid-column: var(--quiz-answer-text-column);\n            margin-block: 0.8em;\n            margin-inline: 0.8em;\n        }\n\n        &--checked, &--correct, &--wrong {\n            --quiz-answer-text-column: span 1;\n            --quiz-answer-animation-duration: 0.25s;\n\n            #{$answer-selector}-icon\n            {\n                animation: \n                    slide-in \n                    var(--quiz-answer-animation-duration) \n                    ease-in\n                ;\n            }\n\n            #{$answer-selector}-text {\n                animation: \n                    answer-text-slide-in \n                    var(--quiz-answer-animation-duration) \n                    ease-in\n                ;\n            }\n\n            @keyframes answer-text-slide-in {\n                from {\n                    translate: calc(var(--quiz-answer-icon-size) * -1) 0;\n                }\n\n                to {\n                    translate: 0 0;\n                }\n            }\n        }\n\n        &:hover:not(&--correct, &--wrong, &--checked)\n        {\n            outline-width: 3px;\n            outline-offset: 3px;\n            outline-style: solid;\n\n            animation: pulse-outline 2s ease-out infinite;\n        }\n\n        &--checked\n        {\n            outline-width: 3px;\n            outline-offset: 3px;\n            outline-style: solid;\n            \n            animation: none;\n        }\n\n        &--correct {\n            --answer-color: #{$green};\n            --answer-border-color: #{color.scale($green, $blackness: 25%)};\n        }\n\n        &--wrong {\n            --answer-color: #{$red};\n            --answer-border-color: #{color.scale($red, $blackness: 25%)};\n        }\n\n        &--disabled {\n            cursor: default;\n        }\n\n        input[type=\"checkbox\"]{\n            display: none;\n            visibility: hidden;\n        }\n    }\n\n    &__submit {\n        grid-column: span var(--grid-columns);\n        justify-self: end;\n    \n        padding-block: 0.8rem;\n        padding-inline: 1.1rem;\n        margin-top: 1rem;\n\n        background-color: $whales-tale;\n\n        border-color: $whales-tale;\n        border-style: solid;\n        border-radius: 5px;\n\n        color: $white;\n\n        cursor: pointer;\n        transition: color 0.25s ease-in-out, 0.25s ease-in-out;\n\n        &:hover:not(:disabled) {\n            background-color: $white;\n            color: $whales-tale;\n        }\n\n        &:disabled {\n            cursor: not-allowed;\n            background-color: $gray;\n            border-color: $gray;\n        }\n    }\n\n    &__result {\n        grid-column: span var(--grid-columns);\n        justify-self: center;\n\n        margin-top: 0.5rem;\n\n        font-weight: 600;\n\n        &--success {\n            color: $green;\n        }\n\n        &--failure {\n            color: $red;\n        }\n    }\n}","$white: #F4F4F4;\r\n$black: #0F0D0D;\r\n$gray: #BDBDBD;\r\n\r\n$red: #F44336;\r\n\r\n$green: #4CAF50;\r\n\r\n$dolphin: #86c4da;\r\n$whales-tale: #115a82;\r\n\r\n$breakpoints: (\r\n  xs: 0,\r\n  sm: 576px,\r\n  md: 768px,\r\n  lg: 992px,\r\n  xl: 1200px,\r\n  xxl: 1400px\r\n);","@use \"variables\" as *;\r\n\r\n@mixin atSmall {\r\n    @media (min-width: map-get($breakpoints, 'sm')) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin atMedium {\r\n    @media (min-width: map-get($breakpoints, 'md')) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin atLarge {\r\n    @media (min-width: map-get($breakpoints, 'lg')) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin atExtraLarge {\r\n    @media (min-width: map-get($breakpoints, 'xl')) {\r\n        @content;\r\n    }\r\n}\r\n\r\n@mixin atExtraExtraLarge {\r\n    @media (min-width: map-get($breakpoints, 'xxl')) {\r\n        @content;\r\n    }\r\n}"],"names":[],"sourceRoot":""}